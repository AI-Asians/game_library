Here's the updated prompt with the requested replacements:

---

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 Which planet is known as the Red Planet?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Reflex-Alley Tap:**  
 Description of mechanic: 

* Answers/options move horizontally across the screen at varying speeds (like targets in a shooting gallery)
* Player must tap/click the correct answer as it passes through a designated "hit zone"
* Multiple wrong answers should be moving at the same time as distractors
* The hit zone should be clearly marked with visual indicators
* The game tests reflexes and visual recognition simultaneously
* If the player misses the correct answer (it passes through the hit zone without being clicked), it should reappear after a short delay

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

* The hit zone should be designed like an arcade target area with flashing pixel borders
* Moving answer options should have a pixel art appearance like classic arcade game sprites
* Use pixel art arrow or targeting indicators to help players identify the hit zone
* Background should resemble a simple scrolling arcade game environment
* Include simple particle effects when successfully hitting the correct answer

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

* The speed of moving objects should increase slightly over time to add challenge
* Provide visual feedback when the player makes a selection (hit or miss)
* The correct answer should appear at random intervals among the distractors
* Ensure the hit detection is generous enough to be satisfying but still require skill
* Include a brief visual tutorial showing the hit zone at the start of the game

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.