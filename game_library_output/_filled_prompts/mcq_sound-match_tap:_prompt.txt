# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 What is the capital of France?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Sound-Match Tap:**  
 Description of mechanic: 

* Different sounds play in sequence, each associated with a different answer option
* Player must listen carefully and tap/click the option when they hear the sound that matches the correct answer
* Each option should have a distinct sound that plays when highlighted or hovered
* Visual cues should accompany sounds (like highlighting or pulsing of options)
* The sequence of sounds should play in a loop until the player makes a selection
* Success depends on audio recognition and tapping at the right moment

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

Use flashing border effects when sounds play to help reinforce the audio-visual connection.
Include visual waveform or equalizer-style effects that pulse with the sound.
Each answer option should have a distinct color and icon to help players associate it with its sound.
Use retro-style sound visualizations that mimic old sound hardware displays.

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

Include a visual indicator that shows which sound is currently playing.
Make sure each sound is distinctly different (pitch, pattern, duration) to make matching easier.
Include a brief tutorial hint at the beginning that disappears after first interaction.
Sound loops should increase in speed slightly over time to add urgency.
Include visual feedback for both correct and incorrect selections.

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.