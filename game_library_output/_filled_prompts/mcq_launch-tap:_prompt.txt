# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 What is the capital of France?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Launch-Tap**  
 Description of mechanic: 

* Player launches or shoots an object (like a projectile, character, or vehicle)
* Player must tap/click at the right time to hit or interact with the correct answer
* Objects should move across the screen in a clear trajectory
* The correct answer should be identifiable (though not too obvious)
* Success depends on timing the tap/launch correctly to hit the target answer
* Include simple physics for the launched object (arc, gravity, etc.)

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The launch mechanism should have a simple power meter or aim indicator
Use bright, contrasting colors for the projectile and answer targets
Include pixelated explosion/impact effects when the projectile hits targets
Add simple arrow indicators to show trajectory path
Use a retro-style targeting reticle or crosshair if appropriate

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The launch mechanism should have a clear visual feedback for power/direction
Add a slight randomness or challenge factor to make timing skill-based
Make the projectile path visually clear with a trail or shadow effect
Provide immediate visual and audio feedback on hits (correct or incorrect)
Consider a simple wind or obstacle factor for added challenge

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.