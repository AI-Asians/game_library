# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type TF.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 The Great Wall of China is visible from space.

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Flash-Dodge**  
 Description of mechanic: 

- Player controls a character or object that must dodge incoming "bad" answers
- True and False answers flash/fly across the screen at different speeds and directions
- Player must navigate through or around incorrect answers
- Player must collect/touch only the correct answer
- Success is determined by avoiding the wrong answer and catching the correct one
- If player touches the wrong answer, they lose immediately
- The game should have a sense of increasing urgency or speed

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The player character should be a simple pixelated avatar (like a spaceship or character)
The "True" and "False" answers should be visually distinct objects that move in patterns
Background should have a simple grid or star-field appearance
Use bright, contrasting colors for the player and the answers
Include simple particle effects when collisions occur

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The player should be able to move in all directions using arrow keys or WASD
Answer objects should move in predictable but challenging patterns
At least 3-5 wrong answer objects should be present to create a challenge
Movement speed should be balanced - not too fast to be impossible, not too slow to be boring
Collisions should have obvious visual and audio feedback

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.