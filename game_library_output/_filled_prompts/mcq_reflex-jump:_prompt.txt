# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 What is the capital of France?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Reflex-Jump**  
 Description of mechanic: 

* Player controls a character that must jump to platforms containing answer options
* Character automatically moves forward or falls if not on a platform
* Each platform contains a possible answer to the question
* Player must time jumps correctly to land on the platform with the correct answer
* Jumping to an incorrect platform results in game over
* A simple "jump" button or key press should control the character's jumps
* Platforms should be spaced to require precise timing
* The character should have a simple jumping animation
* Platforms with incorrect answers may fall away after landing
* Success is achieved by reaching and landing on the platform with the correct answer

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The character should look like a simple 8-bit sprite (e.g., a small square character with basic features)

Platforms should have distinct colors to differentiate answer options

Background should feature a simple scrolling pixel landscape

Use chunky, blocky particles when platforms break or when jumping

Include a simple jump meter or indicator to help with jump timing

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

Platforms should move at a consistent speed that creates urgency but remains fair

Include a visual cue for when to jump (like a shadow or indicator)

Jumping should feel responsive with minimal lag between button press and action

The game should include subtle screen shake on landing for tactile feedback

The character should have simple but expressive reactions to success/failure

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.