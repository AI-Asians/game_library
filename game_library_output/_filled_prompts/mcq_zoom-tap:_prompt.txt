# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 Which planet is known as the Red Planet?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Zoom-Tap**  
 Description of mechanic: 

* Several objects (planets) appear on screen that zoom in and out or move around
* Player must tap/click the correct object (planet) that matches the question
* Objects should have different sizes/scales as they animate
* The correct target should be visually distinct but not overly obvious
* Success is based on accurately selecting the right object among distractors

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The planets should have distinctive pixel art designs that make them easily recognizable.
Use vibrant, contrasting colors for each planet to make them visually distinct.
The zooming animation should have a step-like quality rather than smooth scaling to maintain the 8-bit feel.
Add a slight pixelated "glow" or highlight effect around planets as they zoom to enhance the retro aesthetic.

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The zooming planets should move at different speeds to create varied challenge.
Include a subtle visual indicator when hovering over a planet to show it's clickable.
Add a simple countdown timer (visual only, not numerical) to create urgency.
The planets should occasionally overlap to create momentary decision challenges.
Implement a brief "flash" effect when a planet is clicked for immediate feedback.

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.