# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 What is the capital of France?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Racing-Lanes**  
 Description of mechanic: 

* Player controls a character/vehicle that races in one of multiple lanes
* Each lane contains a different answer option
* Player must guide their character to the lane with the correct answer
* Only one lane contains the correct answer
* Player can switch lanes using keyboard arrows or touchscreen controls
* Movement should feel responsive but with appropriate 8-bit "chunky" physics
* Obstacles or competing racers can be added to increase challenge
* Clear visual indication when player reaches or selects the correct answer lane
* If player stays in incorrect lane too long or reaches finish line in wrong lane, they lose

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The race track should have distinct lane markings with a pixelated finish line visible in the distance.
Each lane should have a clear answer option displayed.
The player character should be a simple pixel-art racer or vehicle with minimal animation frames.
Use bright, contrasting colors to distinguish between different lanes.
Include simple pixel dust/motion effects when changing lanes.

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The race should automatically begin when the game loads, with the player's character already in motion.
Lane switching should feel responsive but with appropriate "weight" to it.
The race should have a natural endpoint (finish line) that appears within 5-8 seconds.
Include a subtle speedup as the player approaches the finish line to add urgency.
Provide immediate visual/audio feedback when lane is changed.
End the game as soon as the player crosses finish line in any lane.

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.