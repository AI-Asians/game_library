# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 What is the capital of France?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Bouncer-Tap**  
 Description of mechanic: 

* A character or object bounces up and down continuously
* Answers appear on platforms or targets at different heights
* Player must tap/click at the right moment when the bouncing object is aligned with the correct answer
* Timing is crucial - if player taps when aligned with wrong answer, they lose
* The bouncing should have a satisfying physics feel with proper acceleration
* Include visual indicators when the bouncer passes over an answer option
* The bouncing speed should be challenging but fair

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The bouncing character should be a simple, recognizable pixel art sprite (like a ball or small character)
The platforms/answer options should have clearly visible text and distinct colors
Include simple particle effects when the bouncer hits a platform
Use contrasting colors for correct and incorrect answers after selection
Add simple background elements like clouds or stars to enhance the retro feel

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The bouncing should start immediately when the game loads
The bounce height should be consistent and predictable
Include a subtle visual or audio cue to help players time their taps
The collision detection should be generous but not too easy
Provide immediate visual feedback when a selection is made

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.