# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 What is the capital of France?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Speed-Match**  
 Description of mechanic: 

* Answers or options quickly appear one after another in the same location
* Player must quickly click/tap when the correct answer appears
* If player doesn't click fast enough, the answer disappears and a new one appears
* Success depends on matching reaction speed with the correct answer
* The cycle speed should increase as the game progresses for added challenge
* Visual feedback should clearly indicate success or failure

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

Options should appear in a pixelated "block" or "window" that flashes when a new option appears
Use high-contrast colors to make the flashing options stand out against the background
Add a simple timer bar that depletes as each option is shown
Include a pixel-art border around the main game area resembling an arcade cabinet
Add a subtle "pulse" effect to the correct answer when clicked

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

Each option should appear for a short, challenging time window (around 1-1.5 seconds)
Include a visual "streak" effect when the correct answer is selected
Provide immediate visual and audio feedback on clicks (correct or incorrect)
Add a slight randomized delay between options to keep players alert
Include a brief visual countdown at the start so players can prepare
Ensure there are at least 3-4 incorrect options that cycle through

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.