# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type TF.  
The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
The Great Wall of China is visible from space.

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

---

**GAME MECHANIC: Morse-Tap:**  
Description of mechanic: 

* Player taps or clicks in a morse code-like pattern (short and long taps) to answer
* For True/False questions, simple patterns like "dot-dash" for true and "dash-dot" for false can be used
* Visual feedback should show the input pattern being created
* Clear visual instructions for which pattern means true and which means false
* Timing is important - short press (<0.5s) for dots, long press (>0.5s) for dashes
* Provide visual feedback as the player creates the pattern

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The morse input area should have a distinct, pixelated telegraph or transmitter appearance
Include pixel art visual representations of dot and dash patterns
Use retro-style flashing or blinking to indicate when input is being recorded
The input pattern should build visually on screen in an 8-bit style
Use contrasting colors to make the morse patterns stand out against the background

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The morse pattern should be simple enough for beginners to execute
Show a clear visual guide for which pattern represents true and which represents false
Provide immediate visual feedback on each tap/press with both light and sound
Include a visual timer that counts down to encourage quick responses
Allow a small margin of error in timing for casual players

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.