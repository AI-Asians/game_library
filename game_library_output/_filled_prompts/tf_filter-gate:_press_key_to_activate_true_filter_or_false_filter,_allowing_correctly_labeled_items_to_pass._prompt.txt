**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type TF.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 The Great Wall of China is visible from space.

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Filter-Gate: Press key to activate True filter or False filter, allowing correctly labeled items to pass.**  
 Description of mechanic: 

- Items (facts) will flow down from top of screen toward gates at the bottom
- Two gates - one labeled "TRUE" and one labeled "FALSE" 
- Player must press the corresponding key to open the correct gate when an item approaches
- If player opens the correct gate (true facts through true gate, false facts through false gate), the item passes through
- If wrong gate or no gate is opened, the item crashes and player loses
- Visual feedback when gates open/close and when items pass through or crash
- Gates should have distinct appearances when open vs. closed

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

Gates should have a distinct mechanical appearance with visible "open" and "closed" states
Items should appear as pixel-art speech bubbles or scrolls containing the fact
Use contrasting colors for TRUE and FALSE gates (green/red recommended)
Include simple particle effects when items pass through or crash

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The falling speed should create urgency but still allow enough time for player decision
Clear key indicators on screen (T for True gate, F for False gate)
Gates should visibly respond to key presses with appropriate animation
Provide immediate, clear feedback on success/failure

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.