# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 What is the capital of France?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Fling-Select**  
 Description of mechanic: 

* Player must flick/fling objects (answer choices) across the screen
* Answers should be attached to physical objects that respond to physics
* The player must aim and launch these objects toward a target or goal area
* The goal/target should be clearly marked and visually distinct
* Only when the correct answer reaches the target area does the player win
* Objects should have realistic physics properties (momentum, bounce, gravity)
* Allow player to adjust force/angle before launching
* Provide visual feedback when objects collide with other elements

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

Objects should have pixelated textures that match the 8-bit theme
The launching mechanism should have a simple power meter or trajectory line
The target zone should pulse or animate in a simple 8-bit style
Include pixel-art obstacles that objects can bounce off
Use chunky pixel particles for collisions

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The launch mechanism should be intuitive (drag and release or similar)
Provide a visual trajectory guide to help with aiming
Objects should feel appropriately weighted with satisfying physics
Allow quick reset if an object misses the target completely
Include simple visual celebration when the correct answer reaches the target

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.