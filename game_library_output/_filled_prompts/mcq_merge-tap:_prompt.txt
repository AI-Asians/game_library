# UPDATED PROMPT

---

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 Which planet is known as the Red Planet?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Merge-Tap**  
 Description of mechanic: 

* Similar-looking objects float around the screen that can be merged by tapping/clicking
* Player needs to merge similar objects by tapping them sequentially
* As objects merge, they form larger units or transform into new elements
* Each merge should provide visual and audio feedback
* The final merge should reveal the correct answer to the question
* Incorrect merges should provide appropriate negative feedback
* Objects should move at a moderate pace giving player time to identify and tap

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

Floating objects should have distinct pixel art designs for planets
Merged objects should have a satisfying "combine" animation with pixel particles
Use bright, contrasting colors to differentiate correct from incorrect objects
Implement a slight "pulse" effect on objects that can be merged
When objects merge, add a brief flash effect in retro style

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

Objects should be large enough to tap/click easily
Ensure there's a clear visual distinction between planets
The correct planet (Mars) should have a distinctive red appearance
Provide immediate feedback when objects are tapped
The game should conclude when the player successfully merges all instances of the correct answer

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.