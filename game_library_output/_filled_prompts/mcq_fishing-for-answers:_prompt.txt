# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 Which planet is known as the Red Planet?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Fishing-For-Answers**  
 Description of mechanic: 

* Players use a fishing rod to "catch" answers floating in a virtual pond/water environment
* Different answers appear as fish or objects floating in the water
* Player casts their line by clicking/tapping where they want to aim
* The fishing hook moves toward the targeted area and "hooks" whatever answer it touches
* Once an answer is caught, it's reeled in automatically and evaluated
* The player must aim carefully to catch the correct answer among several distractors
* Include visual and audio feedback when an answer is caught and when evaluated
* Add slight randomness to the movement of the answers in the water to simulate floating items
* A timer or limited number of casts may be included to add challenge

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

* Water should be animated with simple pixel waves
* Fishing rod should have clear pixelated appearance
* Answer "fish" should be designed with distinct 8-bit style shapes
* Fishing line should be visible when cast
* Include pixelated splash effects when hook enters water
* Use bright, contrasting colors to differentiate between the different answer options
* Include a simple pixelated fishing character or hand at the edge of the screen

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

* Ensure fish/answers move at a moderate pace that makes them challenging but catchable
* Rod casting should have a slight delay to simulate real fishing mechanics
* Reeling animation should be quick to keep gameplay under 10 seconds
* Include a visual splash when the hook enters the water
* The hook should visibly attach to the chosen answer before reeling in
* Provide immediate feedback after catching an answer (correct/incorrect)
* Allow players to cast again immediately if they miss all answers completely

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.