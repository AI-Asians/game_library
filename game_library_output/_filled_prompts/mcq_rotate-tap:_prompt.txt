# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 What is the capital of France?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Rotate-Tap**  
 Description of mechanic: 

* A wheel with multiple answer options rotates continuously
* Player must tap/click at the right moment to select an answer when it's at a marked position (like a pointer)
* The wheel should have visible sections for each possible answer
* The rotation speed should be challenging but not impossibly fast
* When the player clicks, the wheel should stop rotating and highlight the selected answer
* A clear indicator (like an arrow/pointer) should show the active selection point
* Visual feedback should immediately tell the player if their answer is correct or incorrect

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The rotating wheel should have a chunky, pixelated appearance with clear segment dividers.

The pointer/indicator should have a flashing or pulsing effect to draw attention.

Include pixel-art decorative elements around the wheel to enhance the retro arcade feel.

Use contrasting colors for each segment of the wheel to make options clearly distinguishable.

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The wheel should rotate at a consistent speed that gives players a fair chance to time their tap correctly.

Include a brief moment of tension when the player clicks before revealing the result.

The rotation should feel slightly unpredictable to add challenge.

Add a slight wobble or bounce effect to the wheel to enhance the arcade feel.

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.