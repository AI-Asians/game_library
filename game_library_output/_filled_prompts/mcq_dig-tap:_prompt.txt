# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 Which planet is known as the Red Planet?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Dig-Tap**  
 Description of mechanic: 

* Player must dig through layers to find correct answers buried beneath the surface
* Each layer is removed with a tap/click action 
* The surface should appear like dirt, rock, or sand that reveals content underneath
* Position the correct answer and distractors randomly beneath different areas
* Create a satisfying "breaking" or "digging" animation when layers are removed
* Include a shovel or digging tool cursor for theme consistency
* Limited number of digs allowed to increase challenge

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The digging surface should have a pixelated texture with different layers visible as player digs deeper.
Use earth-tone colors (browns, tans) for the digging area.
Implement chunky pixel "dust" particles when digging.
Show cracks forming before a section breaks away.
The shovel/dig tool cursor should be clearly visible and animated in 8-bit style.

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

Limit the number of digs to create just enough challenge (5-7 maximum digs).
Each dig should reveal a small portion of what's underneath.
Include visual cues that hint at content beneath certain areas.
Ensure digging action has a satisfying tactile feel even in a simple implementation.
Add a simple "dig meter" showing remaining digs available.

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.