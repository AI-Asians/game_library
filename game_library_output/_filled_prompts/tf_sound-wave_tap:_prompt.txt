# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type TF.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 The Great Wall of China is visible from space.

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Sound-Wave Tap:  **  
 Description of mechanic: 

* A sound wave or audio visualization (like a waveform or equalizer) animates across the screen
* Player must tap/click at the right moment when the wave reaches a specific amplitude or pattern
* The wave should have distinct visual patterns that clearly indicate when to tap
* Audio feedback should accompany the visual waveform to help players time their taps
* The correct answer is selected by tapping when the wave is in the "True" or "False" zone
* Wave patterns should change in speed or complexity to add challenge

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

Waveform should have chunky, pixelated appearance consistent with 8-bit aesthetic.
Sound indicators should pulse in sync with the wave movement.
Use contrasting colors for TRUE and FALSE zones (like green and red).
Add a pixel-art oscilloscope-like border around the waveform.

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The waveform should complete one full cycle in under 10 seconds.
The sweet spot for tapping should be clearly visible but require some timing skill.
Include subtle audio cues that hint at the optimal moment to tap.
Wave speed should be balanced - not too fast to be frustrating, not too slow to be boring.

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.