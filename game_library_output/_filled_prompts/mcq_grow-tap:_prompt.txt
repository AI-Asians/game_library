# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 What is the capital of France?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Grow-Tap**  
 Description of mechanic: 

* Option bubbles/elements grow progressively larger from small to big
* Player must tap/click the correct answer as it grows
* Smaller bubbles are worth more points (higher challenge for tapping precisely when small)
* Items should start small and visibly expand in size
* Clear visual distinction between the different answer options
* Success requires precision in timing the tap when the item is at the optimal size
* If items grow too large, they may "pop" or disappear, forcing a restart

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

Answer bubbles should have pixelated edges and use blocky colors from a limited palette.
Growing animation should have visible stepping rather than smooth transitions to maintain the 8-bit feel.
When bubbles get too large, they should "pop" with a pixel-style explosion effect.
Include a simple frame/border around the play area that resembles classic arcade cabinets.

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The growing speed of bubbles should be fast enough to create challenge but not impossible.
Ensure that all answer options grow at the same rate.
Include a visual indicator showing how close bubbles are to popping.
Clicking incorrect answers should provide immediate negative feedback.
Bubbles should start growing again automatically if they all pop without player selection.

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.