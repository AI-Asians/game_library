# UPDATED PROMPT

**TASK:**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type TF.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 The Great Wall of China is visible from space.

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Charge-Beam Tap:**  
 Description of mechanic: 

* Player must hold down to charge a beam of energy
* The beam grows/charges visibly while the button is held
* Player must release at the perfect moment when the beam is aligned with the correct answer
* If released too early or too late, the beam misses the target
* Visual feedback should show the beam hitting or missing the target
* The beam should have a pixelated appearance matching the game's aesthetic

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The beam should have a pulsing, pixelated appearance with chunky segments
Target areas for True/False should have distinct 8-bit style frames or containers
Use contrasting colors for the beam and targets that fit the limited color palette
Add subtle pixel-style particle effects when the beam hits a target
Include a simple charge meter that fills up in discrete chunks rather than smoothly

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The charging beam should have increasing intensity as it's held longer
Include a clear visual indicator showing when the beam is at optimal charging level
Ensure the beam firing has a satisfying "punch" feeling with appropriate visual feedback
Make the timing window challenging but fair - not too strict or too forgiving
Provide immediate feedback on whether the answer was correct

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.