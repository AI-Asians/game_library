**UPDATED PROMPT:**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type TF.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 The Great Wall of China is visible from space.

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Binary-Beam: Use mouse to aim a continuous beam left (False) or right (True) to hit targets or guide objects.**  
 Description of mechanic: 

* Player controls a central beam emitter that can rotate left or right
* Left side represents "False" and right side represents "True"
* Player aims the beam by moving the mouse or touching the screen
* The beam should be continuous and visibly connect to the target areas
* Left and right sides should have clear visual indicators of True/False
* When player decides on an answer, they click/tap to lock in their choice
* The beam should have a distinct pixel-art style appearance
* Visual feedback should show when the beam hits the correct or incorrect answer

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The beam should pulse or animate in 8-bit style with chunky pixels
True/False zones should have distinct retro-styled target designs
Use high-contrast colors for the beam against the background
Include pixel-art decorative elements around the beam emitter
The beam should have limited animation frames to maintain the 8-bit aesthetic

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The beam should move smoothly but with slight pixel-like chunkiness
Include visual feedback when the beam hits a target
Add a small cooldown between when player can switch True/False
Make sure the beam has an appropriate width that makes aiming intuitive
Include a subtle visual cue that encourages player to make a selection

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.