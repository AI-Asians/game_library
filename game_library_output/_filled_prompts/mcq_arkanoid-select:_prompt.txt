# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 What is the capital of France?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Arkanoid-Select**  
 Description of mechanic: 

* Player controls a paddle at the bottom of the screen to bounce a ball upward
* Multiple answer options float at the top (like Arkanoid bricks)
* Player must hit the correct answer with the ball to win
* If the ball falls below the paddle, it's a missed chance
* The ball should bounce realistically off walls, ceiling, bricks and paddle
* Answer bricks should visually distinguish between correct and incorrect options
* Correct answer bricks should break when hit by the ball

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The paddle should have a distinct 8-bit appearance with visible pixels.
The ball should be a simple square or circular pixel cluster.
Answer bricks should have pixelated borders and text.
Use bright, contrasting colors for the game elements against a dark background.
Include simple particle effects when bricks are destroyed.

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The paddle should move smoothly with mouse or touch input.
The ball speed should be moderate - not too slow or too fast.
Hitting incorrect answers should provide immediate feedback but allow gameplay to continue.
Ensure the ball's physics feels satisfying with appropriate bounce angles.
Include a small visual indicator showing the correct answer is "Paris" so players know what to aim for.

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.