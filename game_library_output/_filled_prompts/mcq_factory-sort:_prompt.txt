# UPDATED PROMPT:

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 What is the capital of France?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Factory-Sort**  
 Description of mechanic: 

* Items (answers) move along a conveyor belt through the factory
* Player must sort items by directing them to different paths/chutes
* Correct answers must be sorted to one location, incorrect to another
* The conveyor belt moves automatically at a steady pace
* Player uses buttons or levers to control sorting mechanisms
* Visual feedback should indicate correct and incorrect sorting
* Items that reach the end of conveyor belt without being sorted count as missed

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The factory should have pixelated conveyor belts, chunky levers or buttons, and industrial-looking sorting mechanisms.

Use flashing lights or simple animations when items are sorted correctly/incorrectly.

Include pixelated factory elements like gears, pipes, or mechanical arms in the background.

The sorting bins should have clear visual indicators showing which is for correct answers.

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The conveyor belt should move at an appropriate speed that creates urgency but isn't impossibly fast.

Ensure the sorting mechanism is responsive and easy to operate with a single click/tap.

Items on conveyor should be clearly distinguishable as different answer options.

The factory sorting mechanism should provide immediate visual and audio feedback when used.

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.