## UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 What is the capital of France?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Slide-Puzzle Select**  
 Description of mechanic: 

* Players solve a small sliding puzzle (3x3 or 4x4 grid) where tiles can be moved
* Each puzzle tile contains a potential answer option
* Only one tile contains the correct answer
* Player must rearrange the tiles to form a complete pattern or picture
* When the puzzle is correctly assembled, the player must select the tile with the correct answer
* Visual feedback should indicate whether the selected answer is correct or not

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The puzzle pieces should have distinct pixel art borders with a chunky, slightly beveled appearance
Each tile should appear "clickable" with subtle shadowing effects
When tiles are moved, use a discrete "click" or "snap" animation that's consistent with 8-bit movement
The correct position for tiles should be subtly indicated with pixel-art markings or color differences
Include a simple pixel-art frame around the entire puzzle

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The sliding puzzle should be relatively simple (not too many moves required)
Empty space in the puzzle should be visually distinct
Tiles should only be allowed to move into empty spaces following standard sliding puzzle rules
Provide subtle visual hints to help players complete the puzzle quickly
When selecting the answer tile, it should highlight briefly before showing the game result

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.