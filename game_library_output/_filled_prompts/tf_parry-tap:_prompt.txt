Here's the updated prompt with the supplied values and expanded instructions:

---

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type TF.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 The Great Wall of China is visible from space.

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Parry-Tap:**  
 Description of mechanic: 

* Player must defend against incoming objects by tapping/clicking at the precise moment to "parry" them
* Objects representing True and False will fly toward the player from different directions
* The player must parry/tap the object that represents the correct answer
* Incorrect parries or missing the correct object should result in failure
* Visual feedback should clearly show successful parries with pixelated flash effects
* Include a clear visual indicator showing which object represents the correct answer
* Objects should have different movement patterns (straight, zigzag, etc.) to add challenge

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

For the parry mechanic, use bright flash effects when successfully parrying. The incoming True/False objects should have distinct pixelated designs that are easily distinguishable. Include a small shield or sword graphic for the parry point that pulses when active. Use contrasting colors for True (green) and False (red) objects.

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The parry timing should be challenging but fair - objects should move at a speed that gives players enough reaction time. Include a small visual cue (like a flash or glow) right before an object arrives at the parry point to help with timing. Make successful parries feel satisfying with appropriate visual and audio feedback.

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.