# UPDATED PROMPT

---

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type TF.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 The Great Wall of China is visible from space.

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Light-Switch Tap:**  
 Description of mechanic: 

* Two options (True/False) displayed as light switches that can be flipped
* Player must tap/click to toggle the switch to their chosen answer
* The switch should have a clear "ON" and "OFF" position with visual feedback
* The switch should animate when flipped with a satisfying mechanical movement
* Each option should have a light bulb or indicator that lights up when selected
* Player commits their answer by clicking a "Submit" button after making their choice

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

Light switches should have a retro mechanical look with visible screws and metal plates
The background could resemble an old control panel or electrical switchboard
When switches are flipped, add pixel dust or small spark effects
Use contrasting colors for ON/OFF states (bright for ON, dark for OFF)
The submit button should look like an old arcade button with a chunky, pressable appearance

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

Switches should have a satisfying "click" sound effect when flipped
The light bulb indicators should flicker slightly when first turned on
Add a brief delay between flipping the switch and the light turning on for mechanical feel
The submit button should have a distinctive "press" animation and sound
When the answer is submitted, the correct switch should flash or glow if the player was right

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.