# UPDATED PROMPT

**INSTRUCTIONS**

Write code for an educational mini game made with HTML5 canvas featuring ONE QUESTION that is of type MCQ.  
 The game must start immediately in a playable state when loaded (no start screen).

No fancy game-over screen—only include a simple restart button without extra UI elements.

No complex UI beyond what's explicitly requested below.

Keep the code as simple and minimal as possible—minimize lines of code and do not introduce unnecessary complexity.

---

**QUESTION**

Use exactly this ONE question in the game:  
 What is the capital of France?

Ensure the question does not overflow the screen.

---

**DEVICE OPTIMIZATION**

This game will be played on web, so please ensure it is optimized and tested accordingly.  
 Fixed Canvas Size:

* For web: 800×600 pixels

* For mobile: 360×640 pixels

  ---

**GAME MECHANIC: Charge-Tap**  
 Description of mechanic: 

* Player must hold down to "charge up" a power meter or gauge
* The power meter visibly fills as the player holds down
* Player must release at the right moment when the power level aligns with the correct answer
* Different power levels correspond to different answer options
* Timing and precision determine if the player selects the correct answer
* The gauge should have clear visual indicators for each possible answer option
* The charging speed should be moderate - not too fast that it's impossible, not too slow that it's boring

---

**IMPORTANT STYLING & AESTHETIC REQUIREMENTS**

Retro 8-bit Pixel Art style throughout (like classic NES/Game Boy).

All graphics should be pixelated, with a limited color palette (16–32 colors).

Animations should have a chunky, low-frame-rate "8-bit" feel.

UI elements must resemble an old-school arcade interface.

Do NOT use a pixel font. Use a simple, standard web-safe font (for example, Arial or sans-serif). Keep the font usage minimal, with no additional libraries required.

The power meter should have a chunky, pixelated appearance with distinct color changes as it fills.

Include flashing pixel effects when the player releases at a power level.

The gauge should have a blocky, segmented design rather than a smooth gradient.

Add small pixel "burst" effects when the final answer is selected.

---

**SOUND**

Let the model decide what retro-style sound effects to include, but use only a few simple beep-like effects (keep them minimal in code). No external sound libraries or large code snippets required.

---

**GAMEPLAY REQUIREMENTS**

Gameplay must be completable in UNDER 10 SECONDS.

No score-tracking of any kind. The game ends immediately as soon as the player hits the correct or incorrect answer.

Focus on ADDICTIVE, FUN timing with satisfying feedback.

No external dependencies—generate or simulate any needed sound effects in code with minimal overhead.

Simple enough for anyone to understand immediately with minimal instructions.

The charging power meter should emit increasingly higher-pitched sounds as it fills.

Provide clear visual feedback when the player releases at different power levels.

Ensure the power meter fills at a consistent rate for predictable gameplay.

Include a subtle "sweet spot" visual indicator for the correct answer's power level.

---

**DELIVERABLE**

The code must be fully functional, efficient, and tested to work on web.  
 The code must be kept as short as reasonably possible—avoid unnecessary lines.

Provide a single HTML file that is ready to run when downloaded and opened.